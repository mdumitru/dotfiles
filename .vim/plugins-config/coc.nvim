let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-highlight',
    \ 'coc-pyright',
    \ 'coc-lists',
    \ 'coc-yank',
    \ 'coc-vimlsp',
    \ 'coc-markdownlint',
    \ 'coc-vimtex',
    \ ]

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other
" plugin.
function! Check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ Check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" 
" " Make <CR> to accept selected completion item or notify coc.nvim to format
" " <C-g>u breaks current undo, please make your own choice
 inoremap <buffer><silent><expr> <cr> coc#pum#visible() ? coc#pum#confirm()
                               \: "\<c-g>u\<cr>\<c-r>=coc#on_enter()\<cr>"

" use <c-space>for trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" use <cr> to confirm completion
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <buffer><silent> [g <plug>(coc-diagnostic-prev)
nmap <buffer><silent> ]g <plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <buffer><silent> gd <plug>(coc-definition)
nmap <buffer><silent> gy <plug>(coc-type-definition)
nmap <buffer><silent> gi <plug>(coc-implementation)
nmap <buffer><silent> gr <plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <buffer><silent> K :call <sid>show_documentation()<cr>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

nmap <buffer><leader>rn <plug>(coc-rename)

xmap <buffer>=  <plug>(coc-format-selected)
nmap <buffer>=  <plug>(coc-format-selected)

"augroup coc_group
  "autocmd!
  "" Setup formatexpr specified filetype(s).
  "autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  "" Update signature help on jump placeholder
  "autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end

" Fix autofix problem of current line
nmap <buffer><leader>qf  <plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature
" of languageserver.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call CocAction('fold', <f-args>)
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Ideally, we'd want these next mappings to always exist (or at least the
" commands), not just for certain filetypes; however, for that we'd have to
" eagerly load coc in its entirety. So we compromise by making these mappings
" available everywhere once coc has been loaded. Which makes sense, because we
" consider any vim session in which coc isn't loaded to be a lightweight one,
" not meant for code editing; thus we don't need these then.
nnoremap <silent> <leader>c  :<c-u>CocList commands<cr>
nnoremap <silent> <leader>g  :<c-u>CocList grep<cr>
nnoremap <silent> <c-p>      :<c-u>CocList files<cr>

" These really only make sense in the context of a coc-needing source file.
nnoremap <buffer><silent> <leader>a  :<c-u>CocList diagnostics<cr>
nnoremap <buffer><silent> <leader>o  :<c-u>CocList outline<cr>
nnoremap <buffer><silent> <leader>s  :<c-u>CocList -I symbols<cr>
